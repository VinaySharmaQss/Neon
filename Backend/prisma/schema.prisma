// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  USER
}

model User {
  id           Int      @id @default(autoincrement())
  name         String
  email        String   @unique
  password     String
  Image        String?
  phoneNumber  String   @unique
  DOB          DateTime
  role         Role     @default(USER)
  favorites    Place[]
  journey      Int[]
  viewed       Int[]
  interest     String[]
  reviews      Review[]
  cusines      Cuisines[]
  refreshToken String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Place {
  id                Int      @id @default(autoincrement())
  title             String
  mainImage         String
  temperature       String
  rating            Float
  description       String
  eventTime         DateTime
  eventEndTime      DateTime
  location          String
  eventType         String
  footerLogo        String
  footerDescription String
  reviews           Review[]
  favoritedBy       User?    @relation(fields: [userId], references: [id]) 
  userId            Int?
  category          String
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model Review {
  id         Int      @id @default(autoincrement())
  userImage  String?
  userName   String
  reviewDate DateTime  @default(now())
  reviewText String
  rating     Float
  place      Place    @relation(fields: [placeId], references: [id])
  placeId    Int
  user       User     @relation(fields: [userId], references: [id])
  userId     Int
  cusine    Cuisines @relation(fields: [cusineId], references: [id])
  cusineId Int
}

model Cuisines {
  id          Int      @id @default(autoincrement())
  logo        String
  title       String
  date        DateTime
  description String
  cusine      User    @relation(fields: [userId], references: [id])
  userId      Int
  reviews     Review[]
  accepted    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
