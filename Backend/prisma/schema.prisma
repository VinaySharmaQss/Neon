generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  USER
}

model User {
  id           Int        @id @default(autoincrement())
  name         String
  email        String     @unique
  password     String
  Image        String?
  phoneNumber  String     @unique
  DOB          DateTime
  role         Role       @default(USER)
  favorites    Favorite[]
  journey      Int[]
  viewed       Int[]
  interest     String[]
  reviews      Review[]
  cusines      Cuisines[]
  accepted     Int[]
  booked       Boolean    @default(false)
  refreshToken String?
  payments     Payment[]
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

model Place {
  id                Int        @id @default(autoincrement())
  title             String
  mainImage         String
  priceChild        Int @default(0)
  priceAdult        Int @default(0)
  temperature       String
  rating            Float
  description       String
  eventTime         DateTime
  eventEndTime      DateTime
  location          String
  eventType         String
  footerLogo        String
  footerDescription String
  reviews           Review[]
  favorites         Favorite[]
  payments          Payment[]
  category          String
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt
}

model Favorite {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  place     Place    @relation(fields: [placeId], references: [id])
  placeId   Int
  createdAt DateTime @default(now())
}

model Review {
  id          Int       @id @default(autoincrement())
  userImage   String?
  userName    String
  reviewDate  DateTime  @default(now())
  reviewText  String
  rating      Float
  place       Place?    @relation(fields: [placeId], references: [id])
  placeId     Int?
  cusine      Cuisines? @relation(fields: [cusineId], references: [id])
  cusineId    Int?
  user        User      @relation(fields: [userId], references: [id])
  userId      Int
}

model Cuisines {
  id          Int      @id @default(autoincrement())
  logo        String
  title       String
  image       String   @default("")
  date        DateTime
  description String
  cusine      User     @relation(fields: [userId], references: [id])
  userId      Int
  reviews     Review[]
  accepted    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Payment {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  place     Place    @relation(fields: [placeId], references: [id])
  placeId   Int
  amount    Int
  currency  String
  status    String
  sessionId String?  @unique
  createdAt DateTime @default(now())
}
